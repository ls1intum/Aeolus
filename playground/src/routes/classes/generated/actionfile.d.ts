/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The API version of the windfile.
 */
export type APIVersion = string;
/**
 * The author of the actionfile.
 */
export type Author = string | ContactData;
/**
 * The CI platforms that are able to run this windfile.
 */
export type Targets = "cli" | "jenkins" | "bamboo";
/**
 * Action that can be executed.
 */
export type Action = FileAction | ScriptAction | PlatformAction | ExternalAction;
/**
 * Defines a part of the lifecycle of a job.
 */
export type Lifecycle = "preparation" | "working_time" | "post_deadline" | "evaluation" | "all";
/**
 * Exclude this action during the specified parts of the lifetime of an exercise.
 */
export type ExcludeDuring = Lifecycle[];
/**
 * The CI platforms that are able to run this windfile.
 */
export type Targets1 = "cli" | "jenkins" | "bamboo";
/**
 * Exclude this action during the specified parts of the lifetime of an exercise.
 */
export type ExcludeDuring1 = Lifecycle[];
/**
 * The CI platforms that are able to run this windfile.
 */
export type Targets2 = "cli" | "jenkins" | "bamboo";
/**
 * Exclude this action during the specified parts of the lifetime of an exercise.
 */
export type ExcludeDuring2 = Lifecycle[];
/**
 * The CI platforms that are able to run this windfile.
 */
export type Targets3 = "cli" | "jenkins" | "bamboo";
/**
 * The name of the external action.
 */
export type NameOfTheExternalAction = string;
/**
 * Exclude this action during the specified parts of the lifetime of an exercise.
 */
export type ExcludeDuring3 = Lifecycle[];
/**
 * The CI platforms that are able to run this windfile.
 */
export type Targets4 = "cli" | "jenkins" | "bamboo";
/**
 * The actions that are executed during a CI job in a target system. When a job is executed, the actions are executed in the order they are defined in the action.
 */
export type Steps = Action[];

/**
 * Defines an action that can be used in a windfile
 */
export interface ActionFile {
  api: APIVersion;
  metadata: Metadata;
  environment?: Environment;
  steps: Steps;
  [k: string]: unknown;
}
/**
 * Metadata of the actionfile.
 */
export interface Metadata {
  /**
   * The name of the windfile.
   */
  name: string;
  /**
   * Description of what this list of actions is supposed to achieve
   */
  description: string;
  author?: Author;
  /**
   * The targets of the windfile.
   */
  targets?: Targets[];
  [k: string]: unknown;
}
/**
 * Contact data of the author.
 */
export interface ContactData {
  /**
   * The name of the author.
   */
  name: string;
  /**
   * The email of the author.
   */
  email?: string;
  [k: string]: unknown;
}
/**
 * Environment variables for actions.
 */
export interface Environment {
  /**
   * This interface was referenced by `Environment`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `ParametersOfAnAction`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment1`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment2`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment3`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment4`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   */
  [k: string]:
    | {
        [k: string]: unknown;
      }
    | string
    | number
    | boolean
    | null;
}
/**
 * Action that is defined in a file.
 */
export interface FileAction {
  /**
   * The name of the action.
   */
  name: string;
  /**
   * The file that contains the action.
   */
  file: string;
  parameters?: ParametersOfAnAction;
  excludeDuring?: ExcludeDuring;
  environment?: Environment1;
  platform?: Targets1;
  docker?: Docker;
  /**
   * If this is set to true, the action is always executed, even if other actions fail.
   */
  runAlways?: boolean;
  /**
   * The working directory of the file action.
   */
  workdir?: string;
}
/**
 * The parameters of an action.
 */
export interface ParametersOfAnAction {
  /**
   * This interface was referenced by `Environment`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `ParametersOfAnAction`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment1`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment2`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment3`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment4`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   */
  [k: string]:
    | {
        [k: string]: unknown;
      }
    | string
    | number
    | boolean
    | null;
}
/**
 * Environment variables for actions.
 */
export interface Environment1 {
  /**
   * This interface was referenced by `Environment`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `ParametersOfAnAction`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment1`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment2`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment3`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment4`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   */
  [k: string]:
    | {
        [k: string]: unknown;
      }
    | string
    | number
    | boolean
    | null;
}
/**
 * The docker configuration that is used to execute the action
 */
export interface Docker {
  /**
   * The docker image that is used to execute the action
   */
  image: string;
  /**
   * The tag of the docker image that is used to execute the action
   */
  tag?: string;
  /**
   * The volumes that are mounted into the docker container
   */
  volumes?: string[];
  /**
   * The parameters that are passed to the docker daemon, e.g. --cpus=2
   */
  parameters?: string[];
  [k: string]: unknown;
}
/**
 * Internally defined action that can be executed.
 */
export interface ScriptAction {
  /**
   * The name of the action.
   */
  name: string;
  /**
   * The script of the internal action. Written in aeolus DSL
   */
  script: string;
  excludeDuring?: ExcludeDuring1;
  parameters?: ParametersOfAnAction;
  environment?: Environment2;
  platform?: Targets2;
  docker?: Docker1;
  /**
   * If this is set to true, the action is always executed, even if other actions fail.
   */
  runAlways?: boolean;
  /**
   * The working directory of the platform action.
   */
  workdir?: string;
}
/**
 * Environment variables for actions.
 */
export interface Environment2 {
  /**
   * This interface was referenced by `Environment`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `ParametersOfAnAction`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment1`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment2`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment3`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment4`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   */
  [k: string]:
    | {
        [k: string]: unknown;
      }
    | string
    | number
    | boolean
    | null;
}
/**
 * The docker configuration that is used to execute the action
 */
export interface Docker1 {
  /**
   * The docker image that is used to execute the action
   */
  image: string;
  /**
   * The tag of the docker image that is used to execute the action
   */
  tag?: string;
  /**
   * The volumes that are mounted into the docker container
   */
  volumes?: string[];
  /**
   * The parameters that are passed to the docker daemon, e.g. --cpus=2
   */
  parameters?: string[];
  [k: string]: unknown;
}
/**
 * Action that is defined for a specific platform.
 */
export interface PlatformAction {
  /**
   * The name of the action.
   */
  name: string;
  /**
   * The file of the platform action. Written in Python
   */
  file?: string;
  parameters?: ParametersOfAnAction;
  /**
   * The function of the platform action.
   */
  function?: string;
  excludeDuring?: ExcludeDuring2;
  environment?: Environment3;
  platform?: Targets3;
  /**
   * The kind of the platform action.
   */
  kind?: string;
  docker?: Docker2;
  /**
   * If this is set to true, the action is always executed, even if other actions fail.
   */
  runAlways?: boolean;
  /**
   * The working directory of the platform action.
   */
  workdir?: string;
}
/**
 * Environment variables for actions.
 */
export interface Environment3 {
  /**
   * This interface was referenced by `Environment`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `ParametersOfAnAction`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment1`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment2`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment3`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment4`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   */
  [k: string]:
    | {
        [k: string]: unknown;
      }
    | string
    | number
    | boolean
    | null;
}
/**
 * The docker configuration that is used to execute the action
 */
export interface Docker2 {
  /**
   * The docker image that is used to execute the action
   */
  image: string;
  /**
   * The tag of the docker image that is used to execute the action
   */
  tag?: string;
  /**
   * The volumes that are mounted into the docker container
   */
  volumes?: string[];
  /**
   * The parameters that are passed to the docker daemon, e.g. --cpus=2
   */
  parameters?: string[];
  [k: string]: unknown;
}
/**
 * External action that can be executed with or without parameters.
 */
export interface ExternalAction {
  /**
   * The name of the action.
   */
  name: string;
  use: NameOfTheExternalAction;
  parameters?: ParametersOfAnAction;
  excludeDuring?: ExcludeDuring3;
  environment?: Environment4;
  platform?: Targets4;
  docker?: Docker3;
  /**
   * If this is set to true, the action is always executed, even if other actions fail.
   */
  runAlways?: boolean;
  /**
   * The working directory of the external action.
   */
  workdir?: string;
}
/**
 * Environment variables for actions.
 */
export interface Environment4 {
  /**
   * This interface was referenced by `Environment`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `ParametersOfAnAction`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment1`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment2`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment3`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   *
   * This interface was referenced by `Environment4`'s JSON-Schema definition
   * via the `patternProperty` ".+".
   */
  [k: string]:
    | {
        [k: string]: unknown;
      }
    | string
    | number
    | boolean
    | null;
}
/**
 * The docker configuration that is used to execute the action
 */
export interface Docker3 {
  /**
   * The docker image that is used to execute the action
   */
  image: string;
  /**
   * The tag of the docker image that is used to execute the action
   */
  tag?: string;
  /**
   * The volumes that are mounted into the docker container
   */
  volumes?: string[];
  /**
   * The parameters that are passed to the docker daemon, e.g. --cpus=2
   */
  parameters?: string[];
  [k: string]: unknown;
}
