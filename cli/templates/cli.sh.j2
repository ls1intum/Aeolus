#!/usr/bin/env bash
{% set initial_directory = "\"${%s}\"" % initial_directory_variable -%}
set -e
{% if has_multiple_steps -%}
  export {{ initial_directory_variable }}=${PWD}
{%- endif -%}

{%- if environment -%}
{% for env_var in environment %}
export {{ env_var }}="{{ environment[env_var] }}"
{% endfor %}
{%- endif -%}

{%- for step in steps %}
{{ step.name }} () {
  {%- if step.excludeDuring %}
  local _current_lifecycle="${1}"
  {%- for exclude in step.excludeDuring %}
  if [[ "${_current_lifecycle}" == "{{ exclude | replace('Lifecycle.', '') }}" ]]; then
    echo "⚙️ skipping {{ step.name }} because it is excluded during {{ exclude | replace('Lifecycle.', '') }}"
    return 0
  fi
  {% endfor %}
  {%- endif %}
  echo '⚙️ executing {{ step.name }}'
  {% if step.workdir -%}
  cd "{{ step.workdir }}"
  {% endif -%}
  {%- if step.environment -%}
  {%- for key in step.environment.root.root %}
  export {{ key }}="{{ step.environment.root.root[key] }}"
  {%- endfor -%}
  {%- endif -%}
  {%- if step.parameters -%}
    {%- for key in step.parameters.root.root %}
  export {{ key }}="{{ step.parameters.root.root[key] }}"
    {% endfor %}
  {%- endif -%}
  {%- if step.includeDuring %}
  {% endif %}
  {%- if metadata.moveResultsTo %}
  cd {{ initial_directory }}
  mkdir -p {{ metadata.moveResultsTo }}
  shopt -s extglob
  {%- for result in before_results[step.name] %}
  {%- set source_path = result.path -%}
   {%- if step.workdir -%}
   {%- set source_path = step.workdir + "/" + result.path -%}
   {%- endif -%}
  local _sources="{{ source_path }}"
  local _directory
  _directory=$(dirname "${_sources}")
   {%- if result.ignore -%}
  _sources=$(echo ${_sources}/!({{ result.ignore | join(' ') }}))
   {%- endif -%}
  cp -a ${_sources} {{ metadata.moveResultsTo }}/${_directory}
   {%- endfor -%}
  {%- endif -%}
  {{ step.script | indent(2, false) }}
  {%- if metadata.moveResultsTo %}
   cd {{ initial_directory }}
   mkdir -p {{ metadata.moveResultsTo }}
   shopt -s extglob
  {%- for result in after_results[step.name] %}
  {%- set source_path = result.path -%}
   {%- if step.workdir -%}
   {%- set source_path = step.workdir + "/" + result.path -%}
   {%- endif -%}
   local _sources="{{ source_path }}"
   local _directory
   _directory=$(dirname "${_sources}")
   {%- if result.ignore -%}
   _sources=$(echo ${_sources}/!({{ result.ignore | join(' ') }}))
   {%- endif -%}
   cp -a ${_sources} {{ metadata.moveResultsTo }}/${_directory}
   {%- endfor -%}
  {%- endif %}
}
{% endfor -%}

{%- if has_always_actions %}
final_aeolus_post_action () {
  set +e # from now on, we don't exit on errors
  echo '⚙️ executing final_aeolus_post_action'
  cd {{ initial_directory }}
  {%- for step in always_steps -%}
  {%- if needs_lifecycle_parameter %}
  {{ step.name }} "${_current_lifecycle}"
  {%- else %}
  {{ step.name }}
  {%- endif -%}
  {% endfor %}
}
{% endif %}
main () {
{%- if needs_subshells %}
  if [[ "${1}" == "aeolus_sourcing" ]]; then
    return 0 # just source to use the methods in the subshell, no execution
  fi
{%- endif -%}
{%- if needs_lifecycle_parameter %}
  local _current_lifecycle="${1}"
{% endif %}
{%- if needs_subshells %}
  local _script_name
  _script_name=${BASH_SOURCE[0]:-$0}
{%- endif -%}
{% if has_always_actions %}
  trap final_aeolus_post_action EXIT
{% endif %}
{%- for function in functions %}
{%- if needs_lifecycle_parameter -%}
{%- if needs_subshells %}
  cd {{ initial_directory }}
  bash -c "source ${_script_name} aeolus_sourcing; {{ function }} \"${_current_lifecycle}\""
{%- else %}
  cd {{ initial_directory }}
  {{ function }} "${_current_lifecycle}"
{%- endif -%}
{%- else -%}
{%- if needs_subshells %}
  cd {{ initial_directory }}
  bash -c "source ${_script_name} aeolus_sourcing; {{ function }}"
{%- else %}
  {{ function }}
{%- endif -%}
{%- endif -%}
{% endfor %}
}

main "${@}"
