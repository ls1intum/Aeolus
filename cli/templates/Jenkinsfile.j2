pipeline {
{%- if docker %}
  agent {
    docker {
  {%- set dockerImage = "%s" % docker.image -%}
  {%- if docker.tag -%}
    {% set dockerImage = "{}:{}".format(dockerImage, docker.tag) %}
  {%- endif %}
      image '{{ dockerImage }}'
  {%- if docker.parameters -%}
    {%- set dockerParameters = docker.parameters | join(' ') -%}
  {%- else %}
    {%- set dockerParameters = "" -%}
  {%- endif %}
  {%- if docker.volumes -%}
    {%- set dockerParameters = '-v ' + (docker.volumes | join(' ')) + ' ' + dockerParameters -%}
  {%- endif %}
  {%- if dockerParameters %}
      args '{{ dockerParameters }}'
    {%- endif %}
    }
  }
{%- else %}
  agent any
{%- endif -%}

{%- if needs_lifecycle_parameter %}
  parameters {
    string(name: 'current_lifecycle', defaultValue: 'working_time', description: 'The current stage')
  }
{%- endif %}

{%- if environment %}
  environment {
  {%- for env_var, env_value in environment.items() %}
    {{ env_var }} = '{{ env_value }}'
  {%- endfor %}
  }
{%- endif %}

  stages {
    {%- if repositories %}
    {%- for name, repository in repositories.items() %}
    stage('{{ name }}') {
      steps {
        dir('{{ repository.path }}') {
          checkout([$class: 'GitSCM',
            branches: [[name: '{{ repository.branch }}']],
            doGenerateSubmoduleConfigurations: false,
            userRemoteConfigs: [[
              {%- if metadata.gitCredentials %}
              credentialsId: '{{ metadata.gitCredentials }}',
              {%- endif %}
              name: '{{ name }}',
              {%- set url = '${%s}' % repo_metadata[name]["url"] %}
              url: "{{ url }}"
            ]]
          ])
        }
      }
    }
    {%- endfor -%}
    {%- endif %}
    {%- for step in steps %}
    stage('{{ step.name }}') {
      {%- if step.docker %}
      agent {
        docker {
      {%- set dockerImage = "%s" % step.docker.image -%}
      {%- if docker.tag -%}
        {% set dockerImage = "{}:{}".format(dockerImage, step.docker.tag) %}
      {%- endif %}
          image '{{ dockerImage }}'
      {%- if docker.parameters %}
          args '{{ docker.parameters | join(' ') }}'
      {%- endif %}
        }
      }
      {%- endif %}
      {%- if step.excludeDuring %}
      when {
        allOf {
          {%- for exclude in step.excludeDuring %}
            expression { params.current_lifecycle != '{{ exclude | replace('Lifecycle.', '') }}' }
          {%- endfor %}
        }
      }
      {%- endif %}
      {%- if step.environment or step.parameters %}
      environment {
      {%- if step.environment %}
      {%- for key in step.environment.root.root %}
        {{ key }} = '{{ step.environment.root.root[key] }}'
      {%- endfor %}
      {%- endif %}
      {%- if step.parameters %}
      {%- for key in step.parameters.root.root %}
        {{ key }} = '{{ step.parameters.root.root[key] }}'
      {%- endfor %}
      }
      {%- endif %}
      {%- endif %}
      steps {
        {%- if step.workdir %}
        dir('{{ step.workdir }}') {
          {# https://stackoverflow.com/a/45179743 #}
          sh '''#!/usr/bin/env bash
          {{ step.script | indent(10) }}
          '''
        }
        {%- else %}
        sh '''#!/usr/bin/env bash
          {{ step.script | indent(10) }}
        '''
        {%- endif %}
      }
    }
  {%- endfor %}
  }

{%- if has_always_actions or has_results %}
post {
  always {
  {%- for action in always_steps %}
    {%- if action.workdir %}
    dir('{{ action.workdir }}') {
      sh '''#!/usr/bin/env bash
      {{ action.script | indent(8) }}
      '''
    }
    {%- else %}
    sh '''#!/usr/bin/env bash
    {{ action.script | indent(6) }}
    '''
    {%- endif %}
  {%- endfor %}
  {%- if has_results %}
    {%- for workdir, entries in results.items() %}
      dir('{{ workdir }}') {
        {%- for result in entries %}
         {#%- if result.type == 'junit' %}
        {#junit './{{ result.path }}'
        {%- else %}
        archiveArtifacts: './{{result.path}}', fingerprint: true, allowEmptyArchive: true,
        {%- endif %}
           would be cool, but artemis does not work with this #}
        {%- set directory = "results" -%}
        {%-if result.type == "static-code-analysis" %}
          {%- set directory = "staticCodeAnalysisReports" -%}
        {%- endif %}
        {%-if result.type == "custom-feedback" %}
          {%- set directory = "customFeedbacks" -%}
        {%- endif %}
        {%-if result.type == "testwise-coverage" %}
          {%- set directory = "testwiseCoverageReport" -%}
        {%- endif %}
        sh '''#!/usr/bin/env bash
        mkdir -p {{ directory }} || true
        cp {{ result.path }} $WORKSPACE/{{ directory }}/ || true
        {%- if directory == "results" %}
        sed -i 's/<testsuites>/<testsuite>/g ; s/<\\/testsuites>/<\\/testsuite>/g ; s/<testsuites /<testsuite /g' $WORKSPACE/{{ directory }}/{{ result.path.split("/")[-1] }} || true
        sed -i 's/[^[:print:]	]/ï¿½/g' $WORKSPACE/{{ directory }}/{{ result.path.split("/")[-1] }} || true
        {%- endif %}
        '''
        {%- endfor %}
      }
    {%- endfor %}
    {%- if metadata.resultHook %}
    {%- if metadata.resultHookCredentials %}
    sendTestResults credentialsId: '{{ metadata.resultHookCredentials }}', notificationUrl: '{{ metadata.resultHook }}'
    {%- else %}
    sendTestResults notificationUrl: '{{ metadata.resultHook }}'
    {%- endif %}
    {%- endif %}
  {%- endif %}
  {%- if has_always_actions or has_results %}
    cleanWs()
    }
  }
  {%- endif %}
  {%- endif %}
}
