#!/usr/bin/env bash

########################################################################################################################
# Script:       aeolus-deployment                                                                                      #
#                                                                                                                      #
# Description:  Provides a Wrapper to conveniently perform common operations on Aeolus Servers.                        #
#               This assumes a standardized server configuration and properly configured SSH access.                   #
#               Run aeolus-deployment -h for usage information. This script is originally from                         #
#               https://github.com/ls1intum/Pyris and was adapted for the Aeolus project.                              #
#                                                                                                                      #
# Orig. Author: Timor Morrien                                                                                          #
# Orig. Email:  timor.morrien@tum.de @hialus                                                                           #
# Adapted by:   Andreas Resch <a.resch@tum.de>                                                                         #
#                                                                                                                      #
########################################################################################################################


# Function: Ask User for Confirmation, if -y flag is not used
#
# @param question
interactive=true
function user_confirmation {
    if [ $interactive = true ]; then
        echo $1
        read -p "Do you want to continue? [Y/n] " response
        if [[ ! $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
            echo "Aborted."
            exit 0
        fi
    fi
}

# Function: Perform Deployment to Server via Docker
# Expects the pyris-docker.sh script to be present on the remote server
#
# @param deployment host
# @param gateway host
# @param pr tag
# @param pr branch
# @param deployment directory
function docker_deploy {
    local _deployment_host=$1
    local _gateway_host=$2
    local _pr_tag=$3
    local _pr_branch=$4
    local _deployment_directory=$5
    user_confirmation "About to start a deployment of PR $_pr_tag ($_pr_branch) on remote server $_deployment_host using gateway server $_gateway_host"

    ssh -J "$_gateway_host" -o "StrictHostKeyChecking=no" "$_deployment_host" << COMMAND
mkdir -p $_deployment_directory
cd $_deployment_directory
sudo /usr/bin/bash $_deployment_directory/pyris-docker.sh restart $3 $4
COMMAND
}

# Function: Check for -h Flag
#
# @param callback function to display help menu
# @param $@
function extract_help_flag {
    callback=$1; shift

    local OPTIND
    while getopts ":h" opt; do
        case ${opt} in
            h )
                $callback
                exit 0
                ;;
            \? )
                printf 'Invalid Option: -%s\n\n' "${OPTARG}" 1>&2
                $callback
                exit 1
                ;;
        esac
    done
    shift $((OPTIND -1))
}

# Function: Print general usage information
function general_help {
    cat << HELP
Usage:
  ./$(basename $0) <command> [options]

Commands:
  docker-deploy               Deploy to remote Aeolus Server.

General Options:
  -h                          Show help.
HELP
}

# Function: Print docker-deploy usage information
function docker_deploy_help {
    cat << HELP
Usage:
  ./$(basename $0) docker-deploy <host> [options]

Options:
  <host>                      [user@]hostname
  -g                          Gateway [user@]hostname.
  -t                          Docker tag that should be deployed.
  -b                          GitHub branch that should be deployed.
  -d                          Deployment directory
  -y                          Automatic yes to prompts. Assume "yes" as answer to all prompts and run non-interactively.
HELP
}

########################################################################################################################
# Subcommand Menus                                                                                                     #
########################################################################################################################


# Function: Display Docker Deployment Subcommand Menu
#
# @param $@
function docker_deploy_menu {
    extract_help_flag docker_deploy_help "${@}"

    server=$1; shift
    # Handle missing server
    if [ -z "$server" ]
    then
        docker_deploy_help
        exit 1
    fi

    local gateway=''
    local tag=''
    local branch=''
    local directory=''

    local OPTIND
    while getopts ":hyg:t:b:d:" opt; do
        case ${opt} in
            h )
                deploy_help
                exit 0
                ;;
            y )
                interactive=false
                ;;
            g )
                gateway=$OPTARG
                ;;
            t )
                tag=$OPTARG
                ;;
            b )
                branch=$OPTARG
                ;;
            d )
                directory=$OPTARG
                ;;
            \? )
                printf 'Invalid Option: -%s\n\n' "$OPTARG" 1>&2
                docker_deploy_help
                exit 1
                ;;
        esac
    done
    if [ $OPTIND -eq 1 ]; then
        printf "Invalid Option: backup requires an argument\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi
    shift $((OPTIND -1))

    if [ -z "${gateway}" ]; then
        printf "Require gateway to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    if [ -z "${tag}" ]; then
        printf "Require docker tag to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    if [ -z "${branch}" ]; then
        printf "Require branch name to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    if [ -z "${directory}" ]; then
        printf "Require deployment directory to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    docker_deploy "$server" "$gateway" "$tag" "$branch" "$directory"
}

########################################################################################################################
# Main Menu                                                                                                            #
########################################################################################################################


# Parse options to the `aeolus-deplyoment.sh` command
extract_help_flag general_help "${@}"

# read subcommand `aeolus-deplyoment.sh subcommand server` in variable and remove base command from argument list
subcommand=$1; shift

# Handle empty subcommand
if [ -z "${subcommand}" ]; then
    general_help
    exit 1
fi

case "$subcommand" in
    docker-deploy)
        docker_deploy_menu "${@}"
        ;;
    *)
        printf 'Invalid Command: %s\n\n' "${subcommand}" 1>&2
        general_help
        exit 1
        ;;
esac